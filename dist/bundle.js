(()=>{"use strict";const t=class{constructor(){this.randomized=!0,this.endIndex=3873,this.positions={1:this.randomInRange(1,.25*this.endIndex),2:this.randomInRange(.25*this.endIndex,.5*this.endIndex),3:this.randomInRange(.5*this.endIndex,.75*this.endIndex),4:this.randomInRange(.75*this.endIndex,this.endIndex)},this.activeTags={1:[],2:[],3:[],4:[]},this.percentChance=25,this.multiSection=!1,console.log("State initialized with positions:",this.positions)}randomInRange(t,e){const o=Math.floor(t),i=Math.floor(e);return Math.floor(Math.random()*(i-o+1))+o}async modifyPosition(t){var e;if(console.log(`Modifying position for section ${t}`),!(t in this.positions))throw new Error(`Invalid section: ${t}`);const o=null!==(e=await this.fetchVideosByTags(t))&&void 0!==e?e:[];if(console.log(`Tagged videos for section ${t}:`,o),o.length>0){const e=this.positions[t];console.log(`Current ID for section ${t}:`,e);const i=o.map(t=>t.id);if(this.randomized&&100*Math.random()<this.percentChance){const e=o[Math.floor(Math.random()*o.length)];return console.log(`Randomly selected video for section ${t}:`,e),void(this.positions[t]=e.id)}let s=i.indexOf(e);if(console.log(`Current index in tagged list for section ${t}:`,s),-1===s)return void(this.positions[t]=i[0]);console.log("nextIndex",s+1);const n=s+1;return n>=i.length?void(this.positions[t]=i[0]):(console.log(i[n],"next video ID for section",t),this.positions[t]=i[n],void console.log(`Next position for section ${t}:`,this.positions[t]))}if(this.randomized&&100*Math.random()<this.percentChance){const e=Math.floor(Math.random()*this.endIndex)+1;return void(this.positions[t]=e)}const i=this.positions[t]+1>this.endIndex?1:this.positions[t]+1;this.positions[t]=i}async fetchVideosByTags(t){const e=this.activeTags[t];if(!e||0===e.length)return null;try{const t=await fetch("https://www.clipflip.online/api/videos/by-tags",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({tags:e})});if(!t.ok)throw new Error(`Server error (${t.status})`);return await t.json()}catch(o){return console.error(`Failed to fetch videos for section ${t} with tags ${e}`,o),null}}},e=class{constructor(t,e){this.folder="./video/",this.muted=!0,this.playerCount=8,this.selectedTags=new Map,this.state=t,this.html=e}async init(){this.active=this.initializeActive(this.playerCount),this.html.allTags=await this.fetchAllTags(),console.log("Fetched all tags:",this.html.allTags);const t=this.html.createToolbar(),e=this.html.createVideoContainer();document.body.appendChild(t),document.body.appendChild(e),this.attachEventListeners(),this.initializeMuteButton(),await this.loadVideos(),this.updateLayout()}async loadVideos(t=!1){for(let e=1;e<=this.html.videoPlayers.length;e++){if(console.log(`Loading video for Player ${e}...`),!this.state.multiSection&&e>2){console.log(`Player ${e} is not active in single section mode, skipping...`);continue}if(t&&this.active&&this.active[e]){console.log(`Player ${e} currently active, skipping...`);continue}const o=Math.ceil(e/2);console.log(`Loading video for Player ${e} in section ${o}`),await this.state.modifyPosition(o);const i=this.state.positions[o];console.log(`Loading video for Player ${e} at position ${i}`);const s=e-1;this.html.videoPlayers[s].src=this.folder+i+".mp4",this.html.videoPlayers[s].preload="auto";const n=await this.getVideoMetadata(i);console.log(`Loaded metadata for video ${i}:`,n),this.populateMetadataForm(s,n),console.log(`first loading section ${o} position:`,this.state.positions[o]),await this.state.modifyPosition(o),console.log(`changed section ${o} position:`,this.state.positions[o])}}updateLayout(){const t=this.state.multiSection;[0,1].forEach(e=>{const o=this.html.videoPlayers[e].parentElement;console.log("Toggling player",e+1,"visibility:",!o.classList.contains("half-size")),o.classList.toggle("half-size",t),console.log(`Player ${e+1} visibility toggled to:`,!o.classList.contains("half-size"))}),this.html.videoPlayers.forEach((e,o)=>{if(o<2)return;const i=e.parentElement;if(!i)return;const s=t&&o%2==0;s?i.classList.remove("hidden"):i.classList.add("hidden"),console.log(`${s?"Showing":"Hiding"} player ${o+1}`)})}initializeMuteButton(){var t;const e=document.getElementById("muteIcon");this.html.videoPlayers.forEach(t=>{t.muted=this.muted}),e&&(e.innerHTML='\n      <svg class="w-4 h-4 text-gray-300" fill="none" stroke="currentColor" stroke-width="2"\n        viewBox="0 0 24 24">\n        <path stroke-linecap="round" stroke-linejoin="round" d="M11 5L6 9H2v6h4l5 4V5z" />\n        <path stroke-linecap="round" stroke-linejoin="round" d="M15 9a3 3 0 010 6" />\n        <path stroke-linecap="round" stroke-linejoin="round" d="M17.5 7.5a6 6 0 010 9" />\n      </svg>'),null===(t=this.html.muteToggle)||void 0===t||t.addEventListener("click",()=>{this.muted=!this.muted,this.html.videoPlayers.forEach(t=>{t.muted=this.muted}),e.innerHTML=this.muted?'\n      \x3c!-- Unmuted icon: speaker with waves --\x3e\n      <svg class="w-4 h-4 text-gray-300" fill="none" stroke="currentColor" stroke-width="2"\n        viewBox="0 0 24 24">\n        <path stroke-linecap="round" stroke-linejoin="round" d="M11 5L6 9H2v6h4l5 4V5z" />\n        <path stroke-linecap="round" stroke-linejoin="round" d="M15 9a3 3 0 010 6" />\n        <path stroke-linecap="round" stroke-linejoin="round" d="M17.5 7.5a6 6 0 010 9" />\n      </svg>':'\n      \x3c!-- Muted icon: speaker only --\x3e\n      <svg class="w-4 h-4 text-gray-300" fill="none" stroke="currentColor" stroke-width="2"\n        viewBox="0 0 24 24">\n        <path stroke-linecap="round" stroke-linejoin="round" d="M11 5L6 9H2v6h4l5 4V5z" />\n      </svg>'})}attachEventListeners(){this.html.playButton.addEventListener("click",async()=>{console.log("Play button clicked, playing selected videos..."),console.log("Active players:",this.active);try{for(let t=0;t<this.html.videoPlayers.length;t++){const e=this.html.videoPlayers[t];this.active&&this.active[t+1]?(console.log(`Player ${t+1} is active, playing...`),await e.play()):console.log(`Player ${t+1} is inactive, skipping...`)}}catch(t){console.error("Error playing selected videos:",t)}}),this.html.pauseButton.addEventListener("click",async()=>{try{this.html.videoPlayers.forEach(t=>t.pause())}catch(t){console.error("Error playing selected videos:",t)}}),this.html.videoPlayers.forEach((t,e)=>{t.addEventListener("ended",()=>{this.handlePlayerEnded(e)}),t.addEventListener("click",()=>this.togglePlayPause(e))}),this.html.resizeButton.addEventListener("click",()=>{console.log("Resizing, status:",this.state.multiSection),this.state.multiSection=!this.state.multiSection,console.log("Resizing, new status:",this.state.multiSection),this.updateLayout(),this.loadVideos()}),this.html.fullscreenButton.addEventListener("click",()=>{this.toggleFullscreen()})}initializeActive(t){const e={};for(let o=1;o<t;o++)e[o]=o%2==1;return e}async getVideoMetadata(t){try{const e=await fetch(`https://www.clipflip.online/api/videos/${t}`);if(!e.ok)throw new Error(`Failed to fetch metadata for videoId ${t}`);return await e.json()}catch(e){return console.error(`Error fetching metadata for videoId ${t}:`,e),null}}async handlePlayerEnded(t){console.log(`Player ${t+1} ended, switching video...`);const e=Math.floor(t/2)+1;let o;if(0===t?o=1:1===t?o=0:2===t?o=3:3===t?o=2:4===t?o=5:5===t?o=4:6===t?o=7:7===t&&(o=6),void 0===o)return void console.error(`Invalid player index: ${t}`);const i=this.html.videoPlayers[t],s=this.html.videoPlayers[o];await this.state.modifyPosition(e);try{await s.play();const n=i.parentElement;s.parentElement.classList.remove("hidden"),n.classList.add("hidden"),this.active[o+1]=!this.active[o+1],this.active[t+1]=!this.active[t+1],console.log(this.state.positions[e],"current position for section",e);const a=this.state.positions[e],r=this.folder+a+".mp4";i.src=r,i.preload="auto",i.load();const l=await this.getVideoMetadata(a);this.populateMetadataForm(t,l)}catch(o){console.error(`Error in section ${e}, player ${t+1}:`,o)}}togglePlayPause(t){const e=this.html.videoPlayers[t];e.paused?e.play():e.pause()}async addFormsToPlayers(){let t=[];try{const e=await fetch("http://:3000/tags");if(!e.ok)throw new Error("Failed to fetch tags");const o=await new Response(e.body).text();console.log(JSON.parse(o)),t=JSON.parse(o)}catch(t){console.error("Error loading tags:",t)}for(let e=1;e<=8;e++){const o=document.getElementById(`player${e}`);if(!o)continue;const i=t.length?t.map(t=>`<option value="${t.title}">${t.title}</option>`).join(""):"...";console.log(t);const s=document.createElement("div");s.className="form-container hidden",s.innerHTML=`\n            <form id="videoForm${e}">\n                <select id="tagSelect${e}" multiple style="width: 100%;">\n                    ${i}\n                </select>\n                <input type="text" id="videoTitle${e}" placeholder="Video Title" style="width: 100%; margin-top: 5px;" />\n                <input type="text" id="videoModel${e}" placeholder="Model" style="width: 100%; margin-top: 5px;" />\n                <button type="submit" class="submit-button" style="margin-top: 5px;">Submit</button>\n            </form>\n        `,o.appendChild(s);const n=s.querySelector("form");null==n||n.addEventListener("submit",async t=>{var o;t.preventDefault();const i=n.querySelector(`#videoTitle${e}`),s=n.querySelector(`#tagSelect${e}`),a=(null==i?void 0:i.value)||"",r=Array.from((null==s?void 0:s.selectedOptions)||[]).map(t=>t.value),l=document.getElementById(`videoPlayer${e}`);let d="";l&&l.src&&(d=(null===(o=l.src.split("/").pop())||void 0===o?void 0:o.replace(/\.mp4$/,""))||"");const c={title:a,tags:r,id:d};try{const t=await fetch("https://www.clipflip.online/api/videos",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(c)});if(!t.ok)throw new Error(`Server responded with status ${t.status}`);console.log(`Data from player ${e} submitted successfully:`,c)}catch(t){console.error(`Error submitting data for player ${e}:`,t)}})}}async toggleFullscreen(){const t=document,e=document.documentElement;t.fullscreenElement?await t.exitFullscreen():await e.requestFullscreen()}populateMetadataForm(t,e){if(console.log(`Populating metadata form for Player ${t+1} with data:`,e),!this.isMetadataValid(e)||!e)return void console.warn(`Invalid or empty metadata for Player ${t}`);const o=document.getElementById(`metaForm${t+1}`);if(!o)return;if(o.querySelectorAll("input").forEach(t=>{switch(t.placeholder){case"Title":t.value=e.title||"";break;case"Models":t.value=Array.isArray(e.models)?e.models.join(", "):e.models||"";break;case"Studio":t.value=e.studio||""}}),!e.tags||0===e.tags.length)return void console.log(`Player ${t} has no tags.`);console.log(`Populating metadata form for Player ${t+1} with data:`,e);const i=this.html.tagsWrappers[t];this.html.tagsWrappers.forEach((t,e)=>{console.log(t.id,"wrapper id")}),i&&this.html.renderTags(i,e.tags.map(t=>t.title),t,this.toggleTag.bind(this))}async toggleTag(t){var e,o,i;const s=null!==(o=null===(e=t.textContent)||void 0===e?void 0:e.trim())&&void 0!==o?o:"";if(!s)return;const n=`${s}-id`;document.querySelectorAll(`.${n}`).forEach(t=>{t instanceof HTMLElement&&t.classList.toggle("active-tag")});const a=null===(i=t.closest('[id^="player"]'))||void 0===i?void 0:i.id,r=null==a?void 0:a.match(/\d+/),l=r?parseInt(r[0]):NaN;if(isNaN(l))return;const d=Math.floor(l/2+1),c=this.state.activeTags[d],h=t.classList.contains("active-tag");h&&!c.includes(s)?c.push(s):!h&&c.includes(s)&&(this.state.activeTags[d]=c.filter(t=>t!==s)),await this.loadVideos(!0)}async fetchAllTags(){try{const t=await fetch("https://www.clipflip.online/api/tags",{method:"GET",headers:{"Content-Type":"application/json"}});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);return await t.json()}catch(t){return console.error("Failed to fetch tags:",t),[]}}isMetadataValid(t){var e,o;if(!t)return!1;const i=!!(null===(e=t.title)||void 0===e?void 0:e.trim()),s=Array.isArray(t.models)&&t.models.length>0,n=!!(null===(o=t.studio)||void 0===o?void 0:o.trim()),a=Array.isArray(t.tags)&&t.tags.length>0;return i||s||n||a}};class o{constructor(t){this.allTags=[],this.videoPlayers=[],this.tagsWrappers=[],this.state=t}createToolbar(){const t=this.createDiv("button-toolbar");t.className="button-toolbar",this.playButton=this.createButton("playButton",this.svgPlay()),this.pauseButton=this.createButton("pauseButton",this.svgPause()),this.fullscreenButton=this.createButton("fullscreenButton",this.svgFullscreen()),this.resizeButton=this.createButton("resizeButton",this.svgGrid4()),this.muteIcon=this.createSpan("muteIcon"),this.muteToggle=this.createButton("muteToggle",this.muteIcon),this.hideIcon=this.createSpan("hideIcon");const e='\n  <svg class="w-5 h-5 text-gray-300" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">\n    <path stroke-linecap="round" stroke-linejoin="round" d="M5 15l7-7 7 7" />\n  </svg>';return this.hideIcon.innerHTML=e,this.hideFormsButton=this.createButton("hideForms",this.hideIcon),this.hideFormsButton.addEventListener("click",()=>{const t=document.querySelectorAll(".metadata-form");t.forEach(t=>{t.classList.toggle("hidden")}),this.hideIcon.innerHTML=t[0].classList.contains("hidden")?'\n  <svg class="w-5 h-5 text-gray-300" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">\n    <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" />\n  </svg>':e}),t.append(this.playButton,this.pauseButton,this.fullscreenButton,this.resizeButton,this.muteToggle,this.hideFormsButton),t}createVideoContainer(){const t=this.createDiv("video-container");for(let e=1;e<=8;e++){const o=this.createDiv(`player${e}`,`${this.getPositionClass(e)}`),i=this.createMetadataForm(e);o.appendChild(i);const s=document.createElement("video");s.id=`videoPlayer${e}`,s.className="video-layer",o.appendChild(s),t.appendChild(o),this.videoPlayers.push(s)}return t}createButton(t,e){const o=document.createElement("button");return o.id=t,o.className="w-8 h-8 rounded border-2 bg-transparent flex items-center justify-center hover:bg-black/10 transition",o.style.borderColor="rgba(0, 0, 0, 0.4)",o.appendChild(e),o}createSpan(t){const e=document.createElement("span");return e.id=t,e.className="text-black-300",e}createDiv(t,e=""){const o=document.createElement("div");return o.id=t,o.className=e,o}getPositionClass(t){switch(t){case 1:case 2:return 2===t?"video-layer hidden":"video-layer";case 3:case 4:return"video-layer-right half-size hidden";case 5:case 6:return"video-layer-botttom half-size hidden";case 7:case 8:return"video-layer-botttom-right half-size hidden";default:return"video-layer hidden"}}svgPlay(){return this.createSVG("w-5 h-5","M6 4l10 6-10 6V4z")}svgGrid4(){const t=this.createSVG("w-5 h-5");return t.setAttribute("viewBox","0 0 24 24"),t.innerHTML='\n    <rect x="4" y="4" width="6" height="6" stroke="currentColor" stroke-width="2" fill="none" />\n    <rect x="14" y="4" width="6" height="6" stroke="currentColor" stroke-width="2" fill="none" />\n    <rect x="14" y="14" width="6" height="6" stroke="currentColor" stroke-width="2" fill="none" />\n    <rect x="4" y="14" width="6" height="6" stroke="currentColor" stroke-width="2" fill="none" />\n  ',t}svgPause(){return this.createSVG("w-5 h-5","M7 4h4v12H7V4zm6 0h4v12h-4V4z")}svgFullscreen(){return this.createSVG("w-4 h-4","M4 8V4h4M4 16v4h4M20 8V4h-4M20 16v4h-4",!0)}createSVG(t,e,o=!1){const i=document.createElementNS("http://www.w3.org/2000/svg","svg");if(i.setAttribute("class",`${t} text-black-300`),i.setAttribute("viewBox",o?"0 0 24 24":"0 0 20 20"),o){i.setAttribute("fill","none"),i.setAttribute("stroke","currentColor"),i.setAttribute("stroke-width","2");const t=document.createElementNS("http://www.w3.org/2000/svg","path");t.setAttribute("stroke-linecap","round"),t.setAttribute("stroke-linejoin","round"),t.setAttribute("d",e),i.appendChild(t)}else if(e){const t=document.createElementNS("http://www.w3.org/2000/svg","path");t.setAttribute("fill","currentColor"),t.setAttribute("d",e),i.appendChild(t)}return i}togglePlayUI(t){this.playButton.style.display=t?"none":"flex",this.pauseButton.style.display=t?"flex":"none"}setMuteIcon(t){this.muteIcon.innerHTML=t?'<svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">\n           <path stroke-linecap="round" stroke-linejoin="round" d="M18.364 5.636l-12.728 12.728" />\n           <path stroke-linecap="round" stroke-linejoin="round" d="M9 9v6l5 4V5l-5 4z" />\n         </svg>':'<svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">\n           <path stroke-linecap="round" stroke-linejoin="round" d="M11 5L6 9H2v6h4l5 4V5z" />\n         </svg>'}createMetadataForm(t){const e=this.createDiv(`metaForm${t}`,"metadata-form p-2"),o=(e,o)=>{const i=document.createElement("input");return i.type="text",i.placeholder=e,i.className="block w-full mb-2 bg-transparent text-black border border-gray-400 px-2 py-1 rounded placeholder-black-400",i.addEventListener("input",e=>{e.preventDefault(),this.updateMeta(t,o,i.value)}),i},i=o("Title","title"),s=o("Models","models"),n=o("Studio","studio"),a=this.createDiv(`tags${t}`,"tag-container");this.tagsWrappers.push(a);const r=document.createElement("button");r.type="button",r.textContent="+",r.className="plus-button px-2 py-1 m-1 text-sm rounded border border-transparent text-gray-300 transition hover:bg-white/10 hover:border-gray-400";const l=document.createElement("div");l.className="tag-list mt-2 hidden bg-white text-black border border-gray-300 rounded shadow-md z-10 absolute",l.style.minWidth="10rem",this.allTags.forEach(e=>{const o=document.createElement("div");o.textContent=e.title,o.className="px-3 py-2 hover:bg-gray-200 cursor-pointer",o.addEventListener("click",()=>{this.updateMeta(t,"tag",e.title,e.id),l.classList.add("hidden")}),l.appendChild(o)}),r.addEventListener("click",()=>{l.classList.toggle("hidden")});const d=document.createElement("button");d.type="button",d.innerHTML="📤",d.className="upload-button px-2 py-1 m-1 text-sm rounded border border-transparent text-gray-300 transition hover:bg-white/10 hover:border-gray-400";const c=document.createElement("div");c.className="upload-form hidden mt-2 bg-white text-black border border-gray-300 rounded shadow-md p-2 z-10 absolute",c.style.minWidth="14rem";const h=document.createElement("input");h.type="file",h.multiple=!0,h.className="block w-full mb-2";const u=document.createElement("input");u.type="text",u.placeholder="Title",u.className="block w-full mb-2 border border-gray-400 px-2 py-1 rounded";const p=document.createElement("select");p.className="block w-full mb-2 border border-gray-400 px-2 py-1 rounded",this.allTags.forEach(t=>{const e=document.createElement("option");e.value=t.id.toString(),e.textContent=t.title,p.appendChild(e)});const g=document.createElement("button");return g.type="button",g.textContent="Upload",g.className="px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700",g.addEventListener("click",async()=>{var t;if(!(null===(t=h.files)||void 0===t?void 0:t.length))return alert("Please select a file.");const e=new FormData;Array.from(h.files).forEach(t=>{e.append("files",t)}),e.append("title",u.value),e.append("tagId",p.value),(await fetch("https://www.clipflip.online/api/upload-video",{method:"POST",body:e})).ok?(alert("Upload successful"),c.classList.add("hidden")):alert("Upload failed")}),c.append(h,u,p,g),d.addEventListener("click",()=>{c.classList.toggle("hidden")}),e.append(i,s,n,a,r,l,d,c),e}async updateMeta(t,e,o,i){const s=this.videoPlayers[t-1];if(!s)throw new Error(`Video player for index ${t} not found`);const n=s.src;if(!n)throw new Error(`Video source for player at index ${t} is missing`);const a=n.split("/").pop();if(!a)throw new Error(`Could not extract filename from src for video at index ${t}`);const r=a.replace(".mp4","");if(!r)throw new Error(`Extracted video ID is empty for video at index ${t}`);console.log(r);const l={id:r};"title"===e?l.title=o:"models"===e?l.models=o:"studio"===e?l.studio=o:"tag"===e&&(l.tag={id:i,title:o});try{const t=await fetch("https://www.clipflip.online/api/videos",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(l)});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`)}catch(e){throw console.error(`Failed to update metadata for video ${t}:`,e),e}}renderTags(t,e,o,i){console.log(t.id,"container class"),t.innerHTML="";const s=Math.floor(o/2)+1;if(e.forEach((e,o)=>{const n=document.createElement("button");n.className=`${e}-id tag-button px-2 py-1 m-1 text-sm rounded border border-transparent text-gray-300 transition \n  hover:bg-white/10 hover:border-gray-400 ${o>=5?"hidden-tag hidden":""}`,console.log(this.state.activeTags[s],e,"active check"),this.state.activeTags[s]&&this.state.activeTags[s].includes(e)&&(console.log(this.state.activeTags[s],e,"active"),n.classList.add("active-tag")),n.textContent=e,n.addEventListener("click",()=>{i&&i(n)}),t.appendChild(n)}),e.length>5){const e=document.createElement("button");e.textContent="More",e.className="tag-toggle",e.onclick=()=>{t.querySelectorAll(".hidden-tag").forEach(t=>t.classList.toggle("hidden"))},t.appendChild(e)}}}document.addEventListener("DOMContentLoaded",async i=>{i.preventDefault();const s=new t,n=new o(s),a=new e(s,n);await a.init(),window.html=n,window.state=s,window.players=a})})();