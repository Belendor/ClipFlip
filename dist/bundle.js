/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Player.ts":
/*!***********************!*\
  !*** ./src/Player.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Players {\r\n    constructor(state, playerCount = 8) {\r\n        this.folder = 'https://s3.eu-central-1.amazonaws.com/clipflip.online/video/';\r\n        this.muted = true;\r\n        this.state = state;\r\n        this.videoPlayers = [];\r\n        this.active = this.initializeActive(playerCount);\r\n        for (let i = 1; i <= playerCount; i++) {\r\n            const player = document.getElementById(`videoPlayer${i}`);\r\n            if (!(player instanceof HTMLVideoElement)) {\r\n                throw new Error(`Element with id \"videoPlayer${i}\" not found or not a <video> element.`);\r\n            }\r\n            this.videoPlayers.push(player);\r\n        }\r\n        this.playButton = this.getButton('playButton');\r\n        this.pauseButton = this.getButton('pauseButton');\r\n        this.resizeButton = this.getButton('resizeButton');\r\n        this.fullscreenButton = this.getButton('fullscreenButton');\r\n        this.muteToggleBtn = this.getButton('muteToggle');\r\n        this.muteIcon = document.getElementById('muteIcon');\r\n        // this.hideForm = this.getButton('hideForm');\r\n        this.attachEventListeners();\r\n        this.loadVideos();\r\n        this.updateLayout();\r\n        this.updateResizeIcon();\r\n        this.initializeMuteButton();\r\n        // this.addFormsToPlayers();\r\n    }\r\n    updateLayout() {\r\n        const isMulti = this.state.getMultiSection;\r\n        console.log('Multi-section view:', isMulti);\r\n        // toggle 'half-size' class on players 0 and 1\r\n        [0, 1].forEach(index => {\r\n            const player = this.videoPlayers[index];\r\n            const wrapper = player.parentElement;\r\n            wrapper.classList.toggle('half-size', isMulti);\r\n        });\r\n        this.videoPlayers.forEach((player, index) => {\r\n            if (index >= 2) {\r\n                const shouldBeVisible = isMulti\r\n                    ? (index === 2 || index === 4 || index === 6)\r\n                    : false;\r\n                const wrapper = player.parentElement;\r\n                const isHidden = player.classList.contains('hidden');\r\n                if (shouldBeVisible) {\r\n                    // player.classList.remove('hidden');\r\n                    wrapper === null || wrapper === void 0 ? void 0 : wrapper.classList.remove('hidden');\r\n                    console.log(`Showing player ${index + 1}`);\r\n                }\r\n                else if (!shouldBeVisible) {\r\n                    // player.classList.add('hidden');\r\n                    wrapper === null || wrapper === void 0 ? void 0 : wrapper.classList.add('hidden');\r\n                    console.log(`Hiding player ${index + 1}`);\r\n                }\r\n                // always apply half-size in multi layout\r\n                wrapper === null || wrapper === void 0 ? void 0 : wrapper.classList.toggle('half-size', isMulti);\r\n            }\r\n        });\r\n    }\r\n    updateResizeIcon() {\r\n        const isMulti = !this.state.multiSection;\r\n        const iconHTML = isMulti\r\n            ? `\r\n        <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" viewBox=\"0 0 24 24\">\r\n            <rect x=\"3\" y=\"3\" width=\"7\" height=\"7\" />\r\n            <rect x=\"14\" y=\"3\" width=\"7\" height=\"7\" />\r\n            <rect x=\"3\" y=\"14\" width=\"7\" height=\"7\" />\r\n            <rect x=\"14\" y=\"14\" width=\"7\" height=\"7\" />\r\n        </svg>`\r\n            : `\r\n        <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" viewBox=\"0 0 24 24\">\r\n            <rect x=\"4\" y=\"4\" width=\"16\" height=\"16\" />\r\n        </svg>`;\r\n        const iconSpan = document.getElementById('viewIcon');\r\n        if (iconSpan)\r\n            iconSpan.innerHTML = iconHTML;\r\n    }\r\n    initializeMuteButton() {\r\n        var _a;\r\n        const muteIcon = document.getElementById('muteIcon');\r\n        // set initial state: all players muted + muted icon\r\n        this.videoPlayers.forEach(player => {\r\n            player.muted = this.muted;\r\n        });\r\n        if (muteIcon) {\r\n            muteIcon.innerHTML = `\r\n      <svg class=\"w-4 h-4 text-gray-300\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"\r\n        viewBox=\"0 0 24 24\">\r\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M11 5L6 9H2v6h4l5 4V5z\" />\r\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15 9a3 3 0 010 6\" />\r\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M17.5 7.5a6 6 0 010 9\" />\r\n      </svg>`;\r\n        }\r\n        // add click listener\r\n        (_a = this.muteToggleBtn) === null || _a === void 0 ? void 0 : _a.addEventListener('click', () => {\r\n            this.muted = !this.muted;\r\n            this.videoPlayers.forEach(player => {\r\n                player.muted = this.muted;\r\n            });\r\n            muteIcon.innerHTML = !this.muted\r\n                ? `\r\n      <!-- Muted icon: speaker only -->\r\n      <svg class=\"w-4 h-4 text-gray-300\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"\r\n        viewBox=\"0 0 24 24\">\r\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M11 5L6 9H2v6h4l5 4V5z\" />\r\n      </svg>`\r\n                : `\r\n      <!-- Unmuted icon: speaker with waves -->\r\n      <svg class=\"w-4 h-4 text-gray-300\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"\r\n        viewBox=\"0 0 24 24\">\r\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M11 5L6 9H2v6h4l5 4V5z\" />\r\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15 9a3 3 0 010 6\" />\r\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M17.5 7.5a6 6 0 010 9\" />\r\n      </svg>`;\r\n        });\r\n    }\r\n    getButton(id) {\r\n        const btn = document.getElementById(id);\r\n        if (!(btn instanceof HTMLButtonElement)) {\r\n            throw new Error(`Element with id \"${id}\" not found or not a <button> element.`);\r\n        }\r\n        return btn;\r\n    }\r\n    attachEventListeners() {\r\n        this.playButton.addEventListener('click', async () => {\r\n            try {\r\n                // play only videos where the player is active in state\r\n                const playPromises = this.videoPlayers\r\n                    .filter((_, index) => this.active[index + 1])\r\n                    .map(player => player.play());\r\n                await Promise.all(playPromises);\r\n            }\r\n            catch (error) {\r\n                console.error('Error playing selected videos:', error);\r\n            }\r\n        });\r\n        this.pauseButton.addEventListener('click', async () => {\r\n            try {\r\n                // play only videos where the player is active in state\r\n                const playPromises = this.videoPlayers\r\n                    .map(player => player.pause());\r\n                await Promise.all(playPromises);\r\n            }\r\n            catch (error) {\r\n                console.error('Error playing selected videos:', error);\r\n            }\r\n        });\r\n        this.videoPlayers.forEach((player, index) => {\r\n            player.addEventListener('ended', () => {\r\n                this.handlePlayerEnded(index);\r\n            });\r\n            player.addEventListener('click', () => this.togglePlayPause(player));\r\n        });\r\n        this.resizeButton.addEventListener('click', () => {\r\n            this.state.setMultiSection = !this.state.getMultiSection;\r\n            this.updateResizeIcon();\r\n            this.updateLayout();\r\n        });\r\n        this.fullscreenButton.addEventListener('click', () => {\r\n            this.toggleFullscreen();\r\n        });\r\n        // this.hideForm.addEventListener('click', () => {\r\n        //     const forms = document.querySelectorAll('.form-container');\r\n        //     forms.forEach(form => {\r\n        //         form.classList.toggle('hidden');\r\n        //     });\r\n        // });\r\n    }\r\n    initializeActive(playerCount) {\r\n        const act = {};\r\n        for (let i = 1; i <= playerCount; i++) {\r\n            // active only players 1, 3, 5, 7 (odd numbers)\r\n            act[i] = (i % 2 === 1);\r\n        }\r\n        return act;\r\n    }\r\n    loadVideos() {\r\n        for (let i = 0; i < this.videoPlayers.length; i++) {\r\n            // determine section: players 1&2 → 1, 3&4 → 2, 5&6 → 3, 7&8 → 4\r\n            const section = Math.floor(i / 2) + 1;\r\n            // get current position for that section\r\n            const pos = this.state.positions[section];\r\n            // assign video source based on position\r\n            this.videoPlayers[i].src = this.folder + pos + '.mp4';\r\n            // increment position for section for next video load\r\n            this.state.modifyPosition(section);\r\n        }\r\n    }\r\n    async handlePlayerEnded(playerIndex) {\r\n        if (!this.state.getMultiSection && playerIndex > 1) {\r\n            return;\r\n        }\r\n        const section = Math.floor(playerIndex / 2) + 1;\r\n        const primary = this.videoPlayers[section * 2 - 2];\r\n        const secondary = this.videoPlayers[section * 2 - 1];\r\n        const current = this.videoPlayers[playerIndex];\r\n        const next = current === primary ? secondary : primary;\r\n        try {\r\n            await next.play();\r\n            // hide/show wrappers instead of videos\r\n            const currentWrapper = current.parentElement;\r\n            const nextWrapper = next.parentElement;\r\n            nextWrapper.classList.remove('hidden');\r\n            currentWrapper.classList.add('hidden');\r\n            const pos = this.state.positions[section];\r\n            const filename = this.folder + pos + '.mp4';\r\n            current.src = filename;\r\n            current.load();\r\n            this.state.modifyPosition(section, true);\r\n            console.log(`Section ${section}, switching from Player ${playerIndex + 1}`);\r\n            console.log(`Assigned new video: ${filename}`);\r\n        }\r\n        catch (err) {\r\n            console.error(`Error in section ${section}, player ${playerIndex + 1}:`, err);\r\n        }\r\n    }\r\n    togglePlayPause(video) {\r\n        if (video.paused) {\r\n            video.play();\r\n            // // hide form when playing\r\n            // const wrapper = video.parentElement;\r\n            // if (wrapper) {\r\n            //     const form = wrapper.querySelector('.form-container');\r\n            //     form?.classList.add('hidden');\r\n            // }\r\n        }\r\n        else {\r\n            video.pause();\r\n            // // show form when paused\r\n            // const wrapper = video.parentElement;\r\n            // if (wrapper) {\r\n            //     const form = wrapper.querySelector('.form-container');\r\n            //     form?.classList.remove('hidden');\r\n            // }\r\n        }\r\n    }\r\n    async addFormsToPlayers() {\r\n        let tags = [];\r\n        try {\r\n            const response = await fetch('http://localhost:3000/tags');\r\n            if (!response.ok)\r\n                throw new Error('Failed to fetch tags');\r\n            const bodyText = await new Response(response.body).text();\r\n            console.log(JSON.parse(bodyText));\r\n            tags = JSON.parse(bodyText);\r\n        }\r\n        catch (error) {\r\n            console.error('Error loading tags:', error);\r\n        }\r\n        for (let i = 1; i <= 8; i++) {\r\n            const wrapper = document.getElementById(`player${i}`);\r\n            if (!wrapper)\r\n                continue;\r\n            const optionsHtml = tags.length\r\n                ? tags.map(tag => `<option value=\"${tag.title}\">${tag.title}</option>`).join('')\r\n                : `...`;\r\n            console.log(tags);\r\n            const formContainer = document.createElement('div');\r\n            formContainer.className = 'form-container hidden'; // initially hidden\r\n            formContainer.innerHTML = `\r\n            <form id=\"videoForm${i}\">\r\n                <select id=\"tagSelect${i}\" multiple style=\"width: 100%;\">\r\n                    ${optionsHtml}\r\n                </select>\r\n                <input type=\"text\" id=\"videoTitle${i}\" placeholder=\"Video Title\" style=\"width: 100%; margin-top: 5px;\" />\r\n                <input type=\"text\" id=\"videoModel${i}\" placeholder=\"Model\" style=\"width: 100%; margin-top: 5px;\" />\r\n                <button type=\"submit\" class=\"submit-button\" style=\"margin-top: 5px;\">Submit</button>\r\n            </form>\r\n        `;\r\n            wrapper.appendChild(formContainer);\r\n            const form = formContainer.querySelector('form');\r\n            form === null || form === void 0 ? void 0 : form.addEventListener('submit', async (event) => {\r\n                var _a;\r\n                event.preventDefault();\r\n                const titleInput = form.querySelector(`#videoTitle${i}`);\r\n                const tagSelect = form.querySelector(`#tagSelect${i}`);\r\n                const title = (titleInput === null || titleInput === void 0 ? void 0 : titleInput.value) || '';\r\n                const tags = Array.from((tagSelect === null || tagSelect === void 0 ? void 0 : tagSelect.selectedOptions) || []).map(opt => opt.value);\r\n                const video = document.getElementById(`videoPlayer${i}`);\r\n                let videoName = '';\r\n                if (video && video.src) {\r\n                    videoName = ((_a = video.src.split('/').pop()) === null || _a === void 0 ? void 0 : _a.replace(/\\.mp4$/, '')) || '';\r\n                }\r\n                const data = {\r\n                    title,\r\n                    tags,\r\n                    id: videoName,\r\n                };\r\n                try {\r\n                    const response = await fetch('http://localhost:3000/videos', {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        body: JSON.stringify(data),\r\n                    });\r\n                    if (!response.ok) {\r\n                        throw new Error(`Server responded with status ${response.status}`);\r\n                    }\r\n                    console.log(`Data from player ${i} submitted successfully:`, data);\r\n                }\r\n                catch (error) {\r\n                    console.error(`Error submitting data for player ${i}:`, error);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    async toggleFullscreen() {\r\n        const doc = document;\r\n        const el = document.documentElement;\r\n        if (!doc.fullscreenElement) {\r\n            await el.requestFullscreen();\r\n        }\r\n        else {\r\n            await doc.exitFullscreen();\r\n        }\r\n    }\r\n}\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Players);\r\n\n\n//# sourceURL=webpack://video-player/./src/Player.ts?");

/***/ }),

/***/ "./src/State.ts":
/*!**********************!*\
  !*** ./src/State.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass State {\r\n    constructor() {\r\n        this.spread = 500;\r\n        this.endIndex = 3508; // Maximum position index\r\n        this.percentChance = 25; // 25% chance to modify position\r\n        this.multiSection = false; // Whether to use multiple sections\r\n        this.randomized = true;\r\n        this.positions = this.initializePositions(this.randomized);\r\n    }\r\n    initializePositions(randomized = false) {\r\n        const positions = {};\r\n        for (let i = 1; i <= 4; i++) {\r\n            if (randomized) {\r\n                const randomStart = Math.floor(Math.random() * this.endIndex) + 1;\r\n                positions[i] = randomStart;\r\n            }\r\n            else {\r\n                positions[i] = positions[i] + 1 > this.endIndex ? 1 : positions[i] + 1;\r\n            }\r\n        }\r\n        return positions;\r\n    }\r\n    set setMultiSection(value) {\r\n        this.multiSection = value;\r\n    }\r\n    get getMultiSection() {\r\n        return this.multiSection;\r\n    }\r\n    modifyPosition(section, randomize = false) {\r\n        if (!(section in this.positions)) {\r\n            console.warn(`Section ${section} does not exist.`);\r\n            return;\r\n        }\r\n        if (randomize) {\r\n            console.log(true);\r\n            const roll = Math.random() * 100;\r\n            if (roll < this.percentChance) {\r\n                const newValue = Math.floor(Math.random() * this.endIndex) + 1;\r\n                this.positions[section] = newValue;\r\n                return;\r\n            }\r\n        }\r\n        this.positions[section] += 1;\r\n    }\r\n}\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (State);\r\n\n\n//# sourceURL=webpack://video-player/./src/State.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _State__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./State */ \"./src/State.ts\");\n/* harmony import */ var _Player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Player */ \"./src/Player.ts\");\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', async () => {\r\n    const state = new _State__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    const players = new _Player__WEBPACK_IMPORTED_MODULE_1__[\"default\"](state); // Initialize with 8 players\r\n});\r\n\n\n//# sourceURL=webpack://video-player/./src/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;